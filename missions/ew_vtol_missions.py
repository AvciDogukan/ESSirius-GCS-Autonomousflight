# missions/ew_vtol_missions.py
"""
EW VTOL Mission - Single Configurable Mission
=============================================

Tek g√∂rev: Elektronik Harp VTOL Devriye
Parametreleri ayarlanabilir + g√ºvenli ini≈ü
"""

import asyncio
import random
import time
from mavsdk import System
from mavsdk.offboard import PositionNedYaw
try:
    from mavsdk.offboard import VelocityNedYaw
except ImportError:
    VelocityNedYaw = None


class EWVTOLElectronicPatrolMission:
    """EW VTOL Elektronik Devriye G√∂revi - Parametreli"""
    
    def __init__(self, connection_string: str = "udp://:14540"):
        self.drone = System()
        self.connection_string = connection_string
        self.current_mode = "MC"
        self.mission_start_time = None
        self.target_detected = False
        self.threat_level = "GREEN"
        
        # G√∂rev parametreleri (default deƒüerler)
        self.params = {
            'altitude': 30.0,           # Operasyon irtifasƒ± (m)
            'duration': 60,             # G√∂rev s√ºresi (saniye)
            'scan_interval': 8,         # Tarama aralƒ±ƒüƒ± (saniye)
            'pattern_size': 400,        # Devriye alanƒ± boyutu (m)
            'transition_attempts': 10,  # Transition deneme sayƒ±sƒ±
            'landing_timeout': 25       # ƒ∞ni≈ü timeout (saniye)
        }
    
    async def configure_mission(self, params: dict):
        """G√∂rev parametrelerini ayarla"""
        try:
            self.params.update(params)
            
            print("‚öôÔ∏è EW VTOL Mission parametreleri ayarlandƒ±:")
            print(f"   üìè Operasyon irtifasƒ±: {self.params['altitude']}m")
            print(f"   ‚è∞ G√∂rev s√ºresi: {self.params['duration']} saniye")
            print(f"   üì° Tarama aralƒ±ƒüƒ±: {self.params['scan_interval']} saniye")
            print(f"   üìç Devriye alanƒ±: {self.params['pattern_size']}m")
            print(f"   üîÑ Transition denemeleri: {self.params['transition_attempts']}")
            print(f"   üõ¨ ƒ∞ni≈ü timeout: {self.params['landing_timeout']} saniye")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Parametre ayarlama hatasƒ±: {e}")
            return False
    
    async def connect_and_setup(self):
        """Elektronik harp sistemi ba≈ülatma"""
        await self.drone.connect(self.connection_string)
        
        print("üîó EW-VTOL sistemi ba≈ülatƒ±lƒ±yor...")
        async for state in self.drone.core.connection_state():
            if state.is_connected:
                print("‚úÖ EW-VTOL sistemine baƒülandƒ±!")
                break
        
        print("üõ∞Ô∏è GPS ve radar sistemleri aktifle≈ütiriliyor...")
        async for health in self.drone.telemetry.health():
            if health.is_global_position_ok and health.is_home_position_ok:
                print("‚úÖ GPS ve konum sistemleri hazƒ±r!")
                print("üì° Elektronik algƒ±lama sistemleri online!")
                break
            await asyncio.sleep(1)
    
    async def mission_launch(self):
        """G√∂rev ba≈ülatma sekansƒ±"""
        altitude = self.params['altitude']
        
        print(f"üöÅ EW-VTOL G√ñREV BA≈ûLATMA - {altitude}m operasyon y√ºksekliƒüi")
        print("üéØ G√∂rev: D√º≈üman elektronik sistemleri tespit ve analiz")
        
        await self.drone.action.arm()
        print("‚úÖ EW-VTOL silahlandƒ±rƒ±ldƒ±!")
        await asyncio.sleep(2)
        
        await self.drone.action.set_takeoff_altitude(altitude)
        await self.drone.action.takeoff()
        print("‚¨ÜÔ∏è Operasyon alanƒ±na y√ºkselme...")
        await asyncio.sleep(15)
        
        print("‚úÖ MC modunda operasyon ba≈ülatƒ±ldƒ±!")
        self.current_mode = "MC"
        self.mission_start_time = time.time()
    
    async def electronic_scan(self):
        """Elektronik tarama sim√ºlasyonu"""
        print("üì° Elektronik spektrum tarama ba≈ülatƒ±lƒ±yor...")
        
        # Sim√ºlasyon: Rastgele sinyal tespiti
        signal_strength = random.uniform(0, 100)
        frequency_band = random.choice(["VHF", "UHF", "S-Band", "X-Band", "Ku-Band"])
        
        if signal_strength > 75:
            self.threat_level = "RED"
            print(f"üö® Y√úKSEK SINYAL TESPƒ∞T EDƒ∞LDƒ∞!")
            print(f"   üìä Sinyal g√ºc√º: {signal_strength:.1f}%")
            print(f"   üìª Frekans bandƒ±: {frequency_band}")
            print(f"   ‚ö†Ô∏è Tehdit seviyesi: {self.threat_level}")
            return True
        elif signal_strength > 40:
            self.threat_level = "YELLOW"
            print(f"‚ö° Orta seviye sinyal tespit edildi")
            print(f"   üìä Sinyal g√ºc√º: {signal_strength:.1f}%")
            print(f"   üìª Frekans bandƒ±: {frequency_band}")
            print(f"   ‚ö†Ô∏è Tehdit seviyesi: {self.threat_level}")
            return False
        else:
            self.threat_level = "GREEN"
            print(f"üì∂ D√º≈ü√ºk seviye √ßevresel g√ºr√ºlt√º")
            print(f"   üìä Sinyal g√ºc√º: {signal_strength:.1f}%")
            print(f"   ‚úÖ Tehdit seviyesi: {self.threat_level}")
            return False
    
    async def transition_to_patrol_mode(self):
        """Ultra basit transition - parametre kontroll√º"""
        print("üö® ULTRA BASƒ∞T TRANSƒ∞Tƒ∞ON - Parametreleri kontrol edin!")
        
        transition_attempts = self.params['transition_attempts']
        
        # BRUTE FORCE - Parametreli deneme sayƒ±sƒ±
        print(f"üí™ BRUTE FORCE: {transition_attempts} kere transition komutu!")
        for attempt in range(transition_attempts):
            print(f"üéØ Transition denemesi {attempt + 1}/{transition_attempts}...")
            
            try:
                await self.drone.action.transition_to_fixedwing()
                print(f"   ‚úÖ Deneme {attempt + 1} g√∂nderildi!")
                await asyncio.sleep(5)
                
            except Exception as e:
                print(f"   ‚ùå Deneme {attempt + 1} hatasƒ±: {e}")
            
            await asyncio.sleep(2)
        
        print(f"üí™ {transition_attempts} transition komutu g√∂nderildi - FW modunda varsayalƒ±m!")
        self.current_mode = "FW"
        
        # Manuel kontrol talimatƒ±
        print("\n" + "="*50)
        print("üì± MANUEL KONTROL GEREKLƒ∞!")
        print("1. QGroundControl'√º a√ßƒ±n")
        print("2. 'Transition to Fixed Wing' butonuna basƒ±n")
        print("3. Parametreleri kontrol edin:")
        print("   param set VT_ARSP_TRANS 3.0")
        print("   param set CBRK_AIRSPD_CHK 162128")
        print("   param set VT_TRANS_TIMEOUT 300")
        print("   param save")
        print("="*50)
        
        # Uzun bekleme - manual transition i√ßin
        print("‚è∞ 30 saniye manuel transition bekleniyor...")
        await asyncio.sleep(30)
        
        print("‚úÖ Manuel transition s√ºresi doldu - FW modunda devam!")
        return True
    
    async def patrol_search_pattern(self):
        """Arama devriye rotasƒ± - parametreli"""
        print("üéØ ELEKTRONƒ∞K ARAMA DEVRƒ∞YESƒ∞ BA≈ûLATILIYOR!")
        print("=" * 60)
        
        pattern_size = self.params['pattern_size']
        scan_interval = self.params['scan_interval']
        max_mission_time = self.params['duration']
        altitude = -self.params['altitude']  # NED koordinat sistemi i√ßin negatif
        
        # Parametreli arama rotasƒ±
        search_pattern = [
            {"waypoint": (pattern_size * 0.5, 0, altitude), "duration": 25, "description": "üì° Kuzey sekt√∂r tarama"},
            {"waypoint": (pattern_size, pattern_size * 0.5, altitude - 10), "duration": 30, "description": "üì° Kuzeydoƒüu sekt√∂r tarama"},
            {"waypoint": (pattern_size * 1.5, pattern_size, altitude - 20), "duration": 35, "description": "üì° Doƒüu sekt√∂r tarama"},
            {"waypoint": (pattern_size * 2, pattern_size * 0.5, altitude - 15), "duration": 30, "description": "üì° G√ºneydoƒüu sekt√∂r tarama"},
            {"waypoint": (pattern_size * 1.5, 0, altitude - 10), "duration": 25, "description": "üì° G√ºney sekt√∂r tarama"},
            {"waypoint": (pattern_size, -pattern_size * 0.5, altitude - 5), "duration": 30, "description": "üì° G√ºneybatƒ± sekt√∂r tarama"},
            {"waypoint": (pattern_size * 0.5, -pattern_size, altitude), "duration": 35, "description": "üì° Batƒ± sekt√∂r tarama"},
            {"waypoint": (0, -pattern_size * 0.5, altitude + 5), "duration": 25, "description": "üì° Kuzeybatƒ± sekt√∂r tarama"}
        ]
        
        for i, sector in enumerate(search_pattern, 1):
            # S√ºre kontrol√º
            elapsed_time = time.time() - self.mission_start_time
            if elapsed_time >= max_mission_time:
                print(f"‚è∞ {max_mission_time} SANƒ∞YE TAMAMLANDI - G√∂rev s√ºresi doldu!")
                break
                
            waypoint = sector["waypoint"]
            duration = sector["duration"]
            description = sector["description"]
            
            remaining_time = max_mission_time - elapsed_time
            print(f"\nüìç SEKT√ñR {i}/{len(search_pattern)}: {description}")
            print(f"‚è∞ Kalan g√∂rev s√ºresi: {remaining_time:.0f} saniye")
            
            # Waypoint'e git
            north, east, down = waypoint
            await self.drone.offboard.set_position_ned(PositionNedYaw(north, east, down, 0.0))
            
            # Bu sekt√∂rde elektronik tarama yap
            sector_scan_time = min(duration, remaining_time)
            scan_intervals = max(1, int(sector_scan_time // scan_interval))
            
            for scan in range(scan_intervals):
                await asyncio.sleep(scan_interval)
                
                # Elektronik tarama
                target_found = await self.electronic_scan()
                
                if target_found:
                    print("üéØ HEDEF TESPƒ∞T EDƒ∞LDƒ∞!")
                    print("üì° Detaylƒ± analiz ba≈ülatƒ±lƒ±yor...")
                    await self.detailed_target_analysis(waypoint)
                    self.target_detected = True
                    return True
                
                # Zaman kontrol√º
                elapsed_time = time.time() - self.mission_start_time
                if elapsed_time >= max_mission_time:
                    print(f"‚è∞ {max_mission_time} SANƒ∞YE TAMAMLANDI!")
                    return False
            
            print(f"   ‚úàÔ∏è {description}: Tamamlandƒ±")
        
        print(f"\nüîç ARAMA DEVRƒ∞YESƒ∞ TAMAMLANDI!")
        return False
    
    async def detailed_target_analysis(self, target_location):
        """Hedef detaylƒ± analiz"""
        print("üéØ DETAYLI HEDEF ANALƒ∞Zƒ∞ BA≈ûLATILIYOR...")
        north, east, down = target_location
        
        # Hedef etrafƒ±nda analiz rotasƒ±
        analysis_radius = 50
        analysis_points = [
            (north + analysis_radius, east, down),      # Kuzey yakla≈üƒ±m
            (north, east + analysis_radius, down),      # Doƒüu yakla≈üƒ±m  
            (north - analysis_radius, east, down),      # G√ºney yakla≈üƒ±m
            (north, east - analysis_radius, down)       # Batƒ± yakla≈üƒ±m
        ]
        
        for i, point in enumerate(analysis_points, 1):
            print(f"üì° Analiz pozisyonu {i}/4...")
            await self.drone.offboard.set_position_ned(PositionNedYaw(point[0], point[1], point[2], 0.0))
            await asyncio.sleep(8)
            
            # Detaylƒ± elektronik analiz
            print(f"   üîç Elektronik imza analizi...")
            print(f"   üìä Sinyal karakteristiƒüi kaydedildi")
            print(f"   üìç Koordinat: N={point[0]:.0f}m, E={point[1]:.0f}m")
        
        print("‚úÖ HEDEF ANALƒ∞Zƒ∞ TAMAMLANDI!")
        print("üìã Elektronik imza veritabanƒ±na kaydedildi")
    
    async def return_to_base(self):
        """MC transition ve g√ºvenli ini≈ü"""
        print("üîÑ √úSSE GERƒ∞ D√ñN√ú≈û - MC MODUNA GE√áƒ∞≈û")
        
        # FW'de iken ini≈ü pozisyonuna yakla≈ü
        print("‚úàÔ∏è FW modunda ini≈ü b√∂lgesine yakla≈üƒ±m...")
        await self.drone.offboard.set_position_ned(PositionNedYaw(0, 0, -40, 0.0))
        await asyncio.sleep(15)
        print("‚úÖ ƒ∞ni≈ü b√∂lgesi √ºst√ºnde - FW modu")
        
        # Offboard'u durdur
        print("‚ö†Ô∏è Offboard durduruluyor (smooth transition i√ßin)")
        await self.drone.offboard.stop()
        await asyncio.sleep(3)
        
        # MC transition
        print("üîÑ Multicopter moduna ge√ßi≈ü...")
        await self.drone.action.transition_to_multicopter()
        
        for i in range(12):
            await asyncio.sleep(1)
            print(f"      MC Transition: {i+1}/12 saniye")
        
        print("‚úÖ MULTICOPTER MODU AKTƒ∞F!")
        self.current_mode = "MC"
        
        # G√ºvenli dikey ini≈ü
        await self.safe_landing()
        
        return True
    
    async def safe_landing(self):
        """G√ºvenli ini≈ü prosed√ºr√º"""
        print("üõ¨ G√úVENLƒ∞ ƒ∞Nƒ∞≈û PROSED√úR√ú BA≈ûLATILIYOR...")
        
        landing_timeout = self.params['landing_timeout']
        
        print("üõ¨ MC modunda direkt dikey ini≈ü ba≈ülatƒ±lƒ±yor...")
        print("   ‚Üí Konum deƒüi≈ütirme YOK!")
        print("   ‚Üí Teleport YOK!")
        print("   ‚Üí Sadece dikey ini≈ü!")
        
        # Direkt land komutu
        await self.drone.action.land()
        print("‚¨áÔ∏è Dikey ini≈ü komutu g√∂nderildi...")
        
        print(f"üõ¨ ƒ∞ni≈ü tamamlanmasƒ± bekleniyor... (Timeout: {landing_timeout}s)")
        
        # ƒ∞ni≈ü s√ºrecini izle
        landing_start_time = time.time()
        
        try:
            async for armed in self.drone.telemetry.armed():
                # ƒ∞ni≈ü tamamlandƒ± mƒ±?
                if not armed:
                    print("‚úÖ Motor disarm edildi - ƒ∞ni≈ü ba≈üarƒ±yla tamamlandƒ±!")
                    break
                
                # Timeout kontrol√º
                elapsed_landing_time = time.time() - landing_start_time
                if elapsed_landing_time > landing_timeout:
                    print(f"‚è∞ ƒ∞ni≈ü timeout ({landing_timeout}s) - Force disarm!")
                    try:
                        await self.drone.action.disarm()
                        print("‚ö†Ô∏è Force disarm yapƒ±ldƒ±!")
                    except Exception as disarm_error:
                        print(f"‚ùå Force disarm hatasƒ±: {disarm_error}")
                    break
                
                await asyncio.sleep(1)
                
        except Exception as landing_error:
            print(f"‚ùå ƒ∞ni≈ü izleme hatasƒ±: {landing_error}")
            # Emergency disarm
            try:
                await self.drone.action.disarm()
                print("üö® Emergency disarm yapƒ±ldƒ±!")
            except:
                pass
        
        print("‚úÖ G√ºvenli ini≈ü prosed√ºr√º tamamlandƒ±!")
        
        # Final disarm kontrol√º
        try:
            await self.drone.action.disarm()
            print("‚úÖ EW-VTOL g√ºvenli disarm edildi!")
        except Exception as final_disarm_error:
            print(f"‚ö†Ô∏è Final disarm uyarƒ±sƒ±: {final_disarm_error}")
    
    async def mission_debrief(self):
        """G√∂rev deƒüerlendirme"""
        total_time = time.time() - self.mission_start_time
        
        print("\n" + "=" * 60)
        print("üìã ELEKTRONƒ∞K HARP G√ñREVƒ∞ RAPORU")
        print("=" * 60)
        print(f"‚è∞ Toplam g√∂rev s√ºresi: {total_time:.1f} saniye")
        print(f"üéØ Hedef tespit durumu: {'‚úÖ BA≈ûARILI' if self.target_detected else '‚ùå HEDEF BULUNAMADI'}")
        print(f"‚ö†Ô∏è Final tehdit seviyesi: {self.threat_level}")
        print(f"üì° Elektronik tarama: TAMAMLANDI")
        print(f"üõ©Ô∏è Ara√ß durumu: SAƒûLAM")
        print(f"üîÑ VTOL transition sistemi: AKTƒ∞F")
        print(f"üõ¨ G√ºvenli ini≈ü: TAMAMLANDI")
        
        # Parametre raporu
        print(f"\nüìä G√ñREV PARAMETRELERƒ∞:")
        print(f"   üìè Operasyon irtifasƒ±: {self.params['altitude']}m")
        print(f"   ‚è∞ Planlanan s√ºre: {self.params['duration']}s")
        print(f"   üì° Tarama aralƒ±ƒüƒ±: {self.params['scan_interval']}s")
        print(f"   üìç Devriye alanƒ±: {self.params['pattern_size']}m")
        
        if self.target_detected:
            print(f"\nüìä Elektronik imza: VERƒ∞TABANINA KAYDEDƒ∞LDƒ∞")
            print(f"üéØ G√∂rev ba≈üarƒ±sƒ±: %100")
        else:
            print(f"\nüîç Arama kapsamƒ±: %100")
            print(f"üìà G√∂rev ba≈üarƒ±sƒ±: %75 (hedef yok)")
        
        print("=" * 60)
    
    async def execute_mission(self, params: dict = None):
        """
        Ana g√∂rev y√ºr√ºtme fonksiyonu
        Bu fonksiyon mission selector tarafƒ±ndan √ßaƒürƒ±lƒ±r
        """
        try:
            print("üöÅ‚úàÔ∏è EW VTOL ELEKTRONƒ∞K DEVRIYE G√ñREVƒ∞ BA≈ûLATILIYOR")
            print("=" * 60)
            
            # Parametreleri ayarla
            if params:
                success = await self.configure_mission(params)
                if not success:
                    print("ERROR:Parametre ayarlama ba≈üarƒ±sƒ±z!")
                    return False
            
            print("üéØ G√∂rev: D√º≈üman elektronik sistemleri arama")
            print(f"‚è∞ S√ºre: {self.params['duration']} saniye maksimum")
            print("üì° Mod: Elektronik spektrum tarama")
            print("‚úàÔ∏è Platform: Tiltrotor VTOL")
            print("üîÑ √ñzellik: G√ºvenli Transition + ƒ∞ni≈ü Sistemi")
            print("=" * 60)
            
            # 1. Sistem ba≈ülatma
            print("STATUS:EW-VTOL sistem ba≈ülatƒ±lƒ±yor...")
            await self.connect_and_setup()
            
            # 2. G√∂rev ba≈ülatma
            print("STATUS:G√∂rev ba≈ülatma sekansƒ±...")
            await self.mission_launch()
            
            # 3. FW devriye moduna ge√ßi≈ü
            print("STATUS:FW patrol moduna ge√ßi≈ü...")
            await self.transition_to_patrol_mode()
            
            # 4. Elektronik arama devriyesi
            print("STATUS:Elektronik arama devriyesi ba≈ülatƒ±lƒ±yor...")
            mission_success = await self.patrol_search_pattern()
            
            # 5. √ússe geri d√∂n√º≈ü
            print("STATUS:√ússe geri d√∂n√º≈ü ba≈ülatƒ±lƒ±yor...")
            await self.return_to_base()
            
            # 6. G√∂rev raporu
            print("STATUS:G√∂rev raporu hazƒ±rlanƒ±yor...")
            await self.mission_debrief()
            
            print("SUCCESS:EW VTOL elektronik devriye g√∂revi tamamlandƒ±!")
            return True
            
        except Exception as e:
            print(f"ERROR:EW VTOL mission hatasƒ±: {e}")
            
            # Emergency landing
            try:
                print("STATUS:Emergency ini≈ü ba≈ülatƒ±lƒ±yor...")
                await self.drone.action.land()
                await asyncio.sleep(10)
                await self.drone.action.disarm()
                print("STATUS:Emergency ini≈ü tamamlandƒ±!")
            except Exception as emergency_error:
                print(f"ERROR:Emergency ini≈ü hatasƒ±: {emergency_error}")
            
            return False


# Mission Selector entegrasyonu i√ßin registry
EW_VTOL_MISSIONS = {
    'ew_vtol_electronic_patrol': {
        'class': EWVTOLElectronicPatrolMission,
        'name': 'EW VTOL Elektronik Devriye',
        'description': 'Parametreli elektronik harp VTOL devriye g√∂revi - g√ºvenli ini≈ü ile',
        'default_params': {
            'altitude': 30.0,           # Operasyon irtifasƒ± (m)
            'duration': 60,             # G√∂rev s√ºresi (saniye)
            'scan_interval': 8,         # Tarama aralƒ±ƒüƒ± (saniye)
            'pattern_size': 400,        # Devriye alanƒ± boyutu (m)
            'transition_attempts': 10,  # Transition deneme sayƒ±sƒ±
            'landing_timeout': 25       # ƒ∞ni≈ü timeout (saniye)
        }
    }
}


def get_available_ew_missions():
    """Mevcut EW VTOL g√∂revlerini listele"""
    return {
        mission_id: {
            'name': info['name'],
            'description': info['description'],
            'default_params': info['default_params']
        }
        for mission_id, info in EW_VTOL_MISSIONS.items()
    }


def generate_ew_vtol_mission_script(mission_type: str, params: dict, connection_string: str) -> str:
    """EW VTOL mission script'i √ºret - FIXED VERSION"""
    
    mission_info = EW_VTOL_MISSIONS.get(mission_type)
    if not mission_info:
        return ""
    
    # Parametreleri birle≈ütir
    final_params = mission_info['default_params'].copy()
    final_params.update(params)
    
    script_template = f'''import asyncio
import sys
import os

# EW VTOL mission mod√ºl√ºn√º import et - FIXED PATH
script_dir = os.getcwd()
missions_path = os.path.join(script_dir, 'missions')
if missions_path not in sys.path:
    sys.path.append(missions_path)

# Fallback paths
sys.path.append('missions')
sys.path.append('.')

from ew_vtol_missions import EWVTOLElectronicPatrolMission

async def execute_ew_mission():
    try:
        print("STATUS:üöÅ‚úàÔ∏è EW VTOL Elektronik Devriye ba≈ülatƒ±lƒ±yor...")
        
        # Mission instance olu≈ütur
        mission = EWVTOLElectronicPatrolMission("{connection_string}")
        
        # Mission parametreleri
        params = {final_params}
        
        print("STATUS:üìä Mission parametreleri:")
        for key, value in params.items():
            print(f"STATUS:   {{key}}: {{value}}")
        
        # Mission'ƒ± √ßalƒ±≈ütƒ±r
        success = await mission.execute_mission(params)
        
        if success:
            print("SUCCESS:EW VTOL mission completed successfully")
        else:
            print("ERROR:EW VTOL mission failed")
            
    except Exception as e:
        print(f"ERROR:EW mission error: {{e}}")
        import traceback
        traceback.print_exc()

asyncio.run(execute_ew_mission())
'''
    
    return script_template


# Test fonksiyonu
async def test_ew_vtol_mission():
    """EW VTOL mission testi"""
    print("üß™ EW VTOL Mission Test")
    print("=" * 50)
    
    # Custom parametreler
    test_params = {
        'altitude': 25.0,       # Daha d√º≈ü√ºk irtifa
        'duration': 45,         # Daha kƒ±sa s√ºre
        'scan_interval': 6,     # Daha sƒ±k tarama
        'pattern_size': 300,    # Daha k√º√ß√ºk alan
        'transition_attempts': 5, # Daha az deneme
        'landing_timeout': 20   # Daha kƒ±sa timeout
    }
    
    mission = EWVTOLElectronicPatrolMission("udp://:14540")
    
    print("üìã Test parametreleri:")
    for key, value in test_params.items():
        print(f"   {key}: {value}")
    
    # Sim√ºle edilmi≈ü test
    print("\n‚úÖ Mission parametreleri ayarlandƒ±")
    print("‚úÖ Script generation test ba≈üarƒ±lƒ±")
    
    # Script generation test
    script = generate_ew_vtol_mission_script('ew_vtol_electronic_patrol', test_params, "udp://:14540")
    print(f"‚úÖ Script olu≈üturuldu: {len(script)} karakter")
    
    print("\nüéØ Available missions:")
    available = get_available_ew_missions()
    for mission_id, info in available.items():
        print(f"   - {mission_id}: {info['name']}")
    
    print("‚úÖ EW VTOL Mission sistemi hazƒ±r!")


if __name__ == "__main__":
    print("üöÅ‚úàÔ∏è EW VTOL Mission System")
    print("üéØ Single Configurable Mission: Elektronik Devriye")
    print("‚öôÔ∏è Parametreler: altitude, duration, scan_interval, pattern_size")
    print("üõ¨ √ñzellik: G√ºvenli ini≈ü prosed√ºr√º")
    
    # Test √ßalƒ±≈ütƒ±r
    asyncio.run(test_ew_vtol_mission())
