# core/mission_selector.py
"""
Mission Selector Dialog - Final Version
=======================================

G√ºncellenmi≈ü mission selector:
- EW VTOL missions entegrasyonu
- Standart MAVSDK missions
- Parametreli g√∂rev yapƒ±landƒ±rmasƒ±
- Modern UI tasarƒ±m
"""

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, 
                             QPushButton, QListWidget, QTextEdit, QGroupBox,
                             QGridLayout, QSpinBox, QDoubleSpinBox, QCheckBox,
                             QTabWidget, QWidget, QScrollArea, QSlider,
                             QFrame, QComboBox, QListWidgetItem)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPixmap, QPainter, QColor, QIcon

# EW VTOL missions import - g√ºvenli versiyon
try:
    import sys
    import os
    
    # EW missions path ekle
    missions_path = os.path.join(os.path.dirname(__file__), '..', 'missions')
    if missions_path not in sys.path:
        sys.path.append(missions_path)
    
    from ew_vtol_missions import get_available_ew_missions, EW_VTOL_MISSIONS
    EW_MISSIONS_AVAILABLE = True
    print("‚úÖ EW VTOL missions Mission Selector'a y√ºklendi")
    
except ImportError as e:
    print(f"‚ö†Ô∏è EW VTOL missions import hatasƒ±: {e}")
    EW_MISSIONS_AVAILABLE = False
    EW_VTOL_MISSIONS = {}


class MissionSelectorDialog(QDialog):
    """Geli≈ümi≈ü Mission Selector - EW VTOL + Standart G√∂revler"""
    
    mission_selected = pyqtSignal(dict)  # Se√ßilen mission bilgilerini g√∂nder
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.selected_mission_data = None
        self.mission_preview_timer = QTimer()
        self.mission_preview_timer.timeout.connect(self.update_mission_preview)
        
        # Mission kategorileri
        self.standard_missions = {
            'normal_patrol': {
                'name': 'Normal Devriye',
                'description': 'Standart MAVSDK devriye g√∂revi. Orta irtifada g√ºvenli devriye.',
                'icon': 'üöÅ',
                'difficulty': 'Kolay',
                'duration': '5-15 dakika',
                'default_params': {
                    'altitude': 20.0,
                    'duration': 10,
                    'speed': 5,
                    'auto_rtl': True
                }
            },
            'stealth_patrol': {
                'name': 'Al√ßak Sessiz Devriye',
                'description': 'D√º≈ü√ºk irtifa gizli operasyon. Minimal g√ºr√ºlt√º ile devriye.',
                'icon': 'ü§´',
                'difficulty': 'Orta',
                'duration': '10-20 dakika',
                'default_params': {
                    'altitude': 12.0,
                    'duration': 15,
                    'speed': 3,
                    'auto_rtl': True
                }
            },
            'circular_patrol': {
                'name': 'Dairesel Devriye',
                'description': 'Belirlenen merkez etrafƒ±nda dairesel devriye pattern.',
                'icon': '‚≠ï',
                'difficulty': 'Kolay',
                'duration': '8-18 dakika',
                'default_params': {
                    'altitude': 25.0,
                    'duration': 12,
                    'radius': 100,
                    'auto_rtl': True
                }
            },
            'waypoint_mission': {
                'name': 'Waypoint Takip',
                'description': '√ñnceden belirlenen waypoint\'leri takip eden g√∂rev.',
                'icon': 'üìç',
                'difficulty': 'Orta',
                'duration': '10-30 dakika',
                'default_params': {
                    'altitude': 30.0,
                    'duration': 20,
                    'speed': 8,
                    'auto_rtl': True
                }
            }
        }
        
        self.setupUI()
        self.load_missions()
    
    def setupUI(self):
        self.setWindowTitle("üéØ ƒ∞HA G√ñREV KOMUTA MERKEZƒ∞")
        self.setFixedSize(1200, 900)
        self.setModal(True)
        
        main_layout = QVBoxLayout()
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Header
        self.create_header(main_layout)
        
        # Main content area
        content_layout = QHBoxLayout()
        
        # Sol panel - Mission listesi ve kategoriler
        left_panel = self.create_left_panel()
        content_layout.addWidget(left_panel, 2)  # 2/5 oranƒ±nda
        
        # Saƒü panel - Parametreler ve preview
        right_panel = self.create_right_panel()
        content_layout.addWidget(right_panel, 3)  # 3/5 oranƒ±nda
        
        main_layout.addLayout(content_layout)
        
        # Bottom buttons
        self.create_bottom_buttons(main_layout)
        
        self.setLayout(main_layout)
        self.apply_modern_styles()
    
    def create_header(self, layout):
        """Modern header olu≈ütur"""
        header_frame = QFrame()
        header_frame.setFrameStyle(QFrame.NoFrame)
        header_layout = QHBoxLayout(header_frame)
        
        # Logo ve title
        title_layout = QVBoxLayout()
        
        main_title = QLabel("üéØ ƒ∞HA G√ñREV KOMUTA MERKEZƒ∞")
        main_title.setAlignment(Qt.AlignLeft)
        main_title.setStyleSheet("""
            QLabel {
                font-size: 28px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
        """)
        
        subtitle = QLabel("MAVSDK + EW VTOL Mission Control System")
        subtitle.setAlignment(Qt.AlignLeft)
        subtitle.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #7f8c8d;
                font-style: italic;
            }
        """)
        
        title_layout.addWidget(main_title)
        title_layout.addWidget(subtitle)
        
        # Status indicators
        status_layout = QVBoxLayout()
        status_layout.setAlignment(Qt.AlignRight)
        
        # MAVSDK status
        self.mavsdk_status = QLabel("üü¢ MAVSDK Ready")
        self.mavsdk_status.setStyleSheet("color: #27ae60; font-weight: bold;")
        status_layout.addWidget(self.mavsdk_status)
        
        # EW missions status
        ew_status_text = "üü¢ EW VTOL Ready" if EW_MISSIONS_AVAILABLE else "üî¥ EW VTOL Offline"
        ew_status_color = "#27ae60" if EW_MISSIONS_AVAILABLE else "#e74c3c"
        self.ew_status = QLabel(ew_status_text)
        self.ew_status.setStyleSheet(f"color: {ew_status_color}; font-weight: bold;")
        status_layout.addWidget(self.ew_status)
        
        header_layout.addLayout(title_layout)
        header_layout.addStretch()
        header_layout.addLayout(status_layout)
        
        layout.addWidget(header_frame)
    
    def create_left_panel(self):
        """Sol panel - Mission kategorileri ve listesi"""
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # Category tabs
        self.category_tabs = QTabWidget()
        self.category_tabs.currentChanged.connect(self.on_category_changed)
        
        # Standart g√∂revler tab
        standard_tab = self.create_standard_missions_tab()
        self.category_tabs.addTab(standard_tab, "üöÅ Standart G√∂revler")
        
        # EW VTOL g√∂revler tab
        if EW_MISSIONS_AVAILABLE:
            ew_tab = self.create_ew_missions_tab()
            self.category_tabs.addTab(ew_tab, "üöÅ‚úàÔ∏è EW VTOL")
        
        left_layout.addWidget(self.category_tabs)
        
        return left_widget
    
    def create_standard_missions_tab(self):
        """Standart g√∂revler tab'ƒ±"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Mission list
        self.standard_missions_list = QListWidget()
        self.standard_missions_list.setSelectionMode(QListWidget.SingleSelection)
        self.standard_missions_list.itemClicked.connect(self.on_standard_mission_selected)
        
        # Standart g√∂revleri listele
        for mission_id, mission_info in self.standard_missions.items():
            item = QListWidgetItem()
            item.setText(f"{mission_info['icon']} {mission_info['name']}")
            item.setData(Qt.UserRole, mission_id)
            
            # Tooltip
            tooltip = f"Zorluk: {mission_info['difficulty']}\nS√ºre: {mission_info['duration']}\n\n{mission_info['description']}"
            item.setToolTip(tooltip)
            
            self.standard_missions_list.addItem(item)
        
        layout.addWidget(QLabel("üìã Mevcut Standart G√∂revler:"))
        layout.addWidget(self.standard_missions_list)
        
        return widget
    
    def create_ew_missions_tab(self):
        """EW VTOL g√∂revler tab'ƒ±"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # EW missions list
        self.ew_missions_list = QListWidget()
        self.ew_missions_list.setSelectionMode(QListWidget.SingleSelection)
        self.ew_missions_list.itemClicked.connect(self.on_ew_mission_selected)
        
        layout.addWidget(QLabel("üöÅ‚úàÔ∏è EW VTOL G√∂revleri:"))
        layout.addWidget(self.ew_missions_list)
        
        # EW √∂zel bilgi paneli
        ew_info = QFrame()
        ew_info.setFrameStyle(QFrame.Box)
        ew_info_layout = QVBoxLayout(ew_info)
        
        ew_info_label = QLabel("‚ö° EW VTOL √ñzellikleri:")
        ew_info_label.setStyleSheet("font-weight: bold; color: #e67e22;")
        
        ew_features = QLabel("""
‚Ä¢ VTOL Transition (MC ‚Üî FW)
‚Ä¢ Elektronik spektrum tarama
‚Ä¢ Parametreli devriye pattern
‚Ä¢ G√ºvenli ini≈ü prosed√ºr√º
‚Ä¢ Hedef tespit ve analiz
        """)
        ew_features.setStyleSheet("color: #34495e; font-size: 11px;")
        
        ew_info_layout.addWidget(ew_info_label)
        ew_info_layout.addWidget(ew_features)
        
        layout.addWidget(ew_info)
        
        return widget
    
    def create_right_panel(self):
        """Saƒü panel - Parametreler ve preview"""
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        
        # Mission preview
        self.create_mission_preview(right_layout)
        
        # Parameters section
        self.create_parameters_section(right_layout)
        
        # Mission description
        self.create_description_section(right_layout)
        
        return right_widget
    
    def create_mission_preview(self, layout):
        """Mission preview paneli"""
        preview_group = QGroupBox("üìä G√∂rev √ñnizleme")
        preview_layout = QVBoxLayout(preview_group)
        
        # Mission name ve icon
        self.preview_title = QLabel("G√∂rev se√ßin...")
        self.preview_title.setAlignment(Qt.AlignCenter)
        self.preview_title.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50;
                padding: 10px;
                background-color: #ecf0f1;
                border-radius: 8px;
                margin-bottom: 10px;
            }
        """)
        
        # Quick stats
        stats_layout = QGridLayout()
        
        self.stat_difficulty = QLabel("Zorluk: -")
        self.stat_duration = QLabel("S√ºre: -")
        self.stat_altitude = QLabel("ƒ∞rtifa: -")
        self.stat_category = QLabel("Kategori: -")
        
        stats_layout.addWidget(QLabel("üéØ"), 0, 0)
        stats_layout.addWidget(self.stat_difficulty, 0, 1)
        stats_layout.addWidget(QLabel("‚è∞"), 1, 0)
        stats_layout.addWidget(self.stat_duration, 1, 1)
        stats_layout.addWidget(QLabel("üìè"), 0, 2)
        stats_layout.addWidget(self.stat_altitude, 0, 3)
        stats_layout.addWidget(QLabel("üìÇ"), 1, 2)
        stats_layout.addWidget(self.stat_category, 1, 3)
        
        preview_layout.addWidget(self.preview_title)
        preview_layout.addLayout(stats_layout)
        
        layout.addWidget(preview_group)
    
    def create_parameters_section(self, layout):
        """Parametreler b√∂l√ºm√º"""
        params_group = QGroupBox("‚öôÔ∏è G√∂rev Parametreleri")
        self.params_layout = QVBoxLayout(params_group)
        
        # Dynamic parameter widgets will be added here
        self.param_widgets = {}
        
        # Default empty state
        empty_label = QLabel("Parametre g√∂rmek i√ßin bir g√∂rev se√ßin...")
        empty_label.setAlignment(Qt.AlignCenter)
        empty_label.setStyleSheet("color: #7f8c8d; font-style: italic;")
        self.params_layout.addWidget(empty_label)
        
        layout.addWidget(params_group)
    
    def create_description_section(self, layout):
        """A√ßƒ±klama b√∂l√ºm√º"""
        desc_group = QGroupBox("üìù G√∂rev A√ßƒ±klamasƒ±")
        desc_layout = QVBoxLayout(desc_group)
        
        self.mission_description = QTextEdit()
        self.mission_description.setMaximumHeight(120)
        self.mission_description.setReadOnly(True)
        self.mission_description.setPlainText("G√∂rev se√ßtiƒüinizde detaylƒ± a√ßƒ±klama burada g√∂r√ºnecek...")
        
        desc_layout.addWidget(self.mission_description)
        layout.addWidget(desc_group)
    
    def create_bottom_buttons(self, layout):
        """Alt butonlar"""
        button_layout = QHBoxLayout()
        
        # Sol taraf - bilgi butonlarƒ±
        info_layout = QHBoxLayout()
        
        help_btn = QPushButton("‚ùì Yardƒ±m")
        help_btn.clicked.connect(self.show_help)
        
        settings_btn = QPushButton("‚öôÔ∏è Ayarlar")
        settings_btn.clicked.connect(self.show_settings)
        
        info_layout.addWidget(help_btn)
        info_layout.addWidget(settings_btn)
        
        # Saƒü taraf - ana butonlar
        main_buttons_layout = QHBoxLayout()
        
        # ƒ∞ptal butonu
        cancel_btn = QPushButton("‚ùå ƒ∞ptal")
        cancel_btn.clicked.connect(self.reject)
        cancel_btn.setMinimumSize(120, 45)
        
        # √ñnizleme butonu
        preview_btn = QPushButton("üëÅÔ∏è √ñnizleme")
        preview_btn.clicked.connect(self.preview_mission)
        preview_btn.setMinimumSize(120, 45)
        
        # Ba≈ülat butonu
        self.start_btn = QPushButton("üöÄ G√∂revi Ba≈ülat")
        self.start_btn.clicked.connect(self.start_mission)
        self.start_btn.setEnabled(False)
        self.start_btn.setMinimumSize(150, 45)
        
        main_buttons_layout.addWidget(cancel_btn)
        main_buttons_layout.addWidget(preview_btn)
        main_buttons_layout.addWidget(self.start_btn)
        
        # Layout'a ekle
        button_layout.addLayout(info_layout)
        button_layout.addStretch()
        button_layout.addLayout(main_buttons_layout)
        
        layout.addLayout(button_layout)
    
    def load_missions(self):
        """EW missions'larƒ± y√ºkle"""
        if EW_MISSIONS_AVAILABLE:
            try:
                available_ew_missions = get_available_ew_missions()
                
                for mission_id, mission_info in available_ew_missions.items():
                    item = QListWidgetItem()
                    item.setText(f"‚úàÔ∏è {mission_info['name']}")
                    item.setData(Qt.UserRole, mission_id)
                    
                    # Tooltip
                    tooltip = f"EW VTOL Mission\n\n{mission_info['description']}"
                    item.setToolTip(tooltip)
                    
                    self.ew_missions_list.addItem(item)
                
                print(f"‚úÖ {len(available_ew_missions)} EW mission y√ºklendi")
                
            except Exception as e:
                print(f"‚ùå EW missions y√ºkleme hatasƒ±: {e}")
    
    def on_category_changed(self, index):
        """Kategori deƒüi≈ütiƒüinde"""
        # Se√ßimi temizle
        self.clear_selection()
    
    def on_standard_mission_selected(self, item):
        """Standart g√∂rev se√ßildi"""
        mission_id = item.data(Qt.UserRole)
        mission_info = self.standard_missions[mission_id]
        
        self.selected_mission_data = {
            'mission_type': mission_info['name'],
            'mission_id': mission_id,
            'category': 'standard',
            'icon': mission_info['icon'],
            'difficulty': mission_info['difficulty'],
            'duration_text': mission_info['duration'],
            'description': mission_info['description'],
            'default_params': mission_info['default_params'].copy()
        }
        
        # EW se√ßimini temizle
        self.ew_missions_list.clearSelection()
        
        # UI'yi g√ºncelle
        self.update_mission_ui()
        self.start_btn.setEnabled(True)
        
        print(f"Standart g√∂rev se√ßildi: {mission_info['name']}")
    
    def on_ew_mission_selected(self, item):
        """EW VTOL g√∂rev se√ßildi"""
        if not EW_MISSIONS_AVAILABLE:
            return
        
        mission_id = item.data(Qt.UserRole)
        
        try:
            available_missions = get_available_ew_missions()
            mission_info = available_missions[mission_id]
            
            self.selected_mission_data = {
                'mission_type': mission_info['name'],
                'mission_id': mission_id,
                'category': 'ew_vtol',
                'icon': 'üöÅ‚úàÔ∏è',
                'difficulty': 'ƒ∞leri',
                'duration_text': 'Parametreli',
                'description': mission_info['description'],
                'default_params': mission_info['default_params'].copy()
            }
            
            # Standart se√ßimi temizle
            self.standard_missions_list.clearSelection()
            
            # UI'yi g√ºncelle
            self.update_mission_ui()
            self.start_btn.setEnabled(True)
            
            print(f"EW VTOL g√∂rev se√ßildi: {mission_info['name']}")
            
        except Exception as e:
            print(f"‚ùå EW mission se√ßim hatasƒ±: {e}")
    
    def update_mission_ui(self):
        """Se√ßilen g√∂rev i√ßin UI'yi g√ºncelle"""
        if not self.selected_mission_data:
            return
        
        # Preview g√ºncelle
        mission_name = self.selected_mission_data['mission_type']
        icon = self.selected_mission_data['icon']
        
        self.preview_title.setText(f"{icon} {mission_name}")
        
        # Stats g√ºncelle
        self.stat_difficulty.setText(f"Zorluk: {self.selected_mission_data['difficulty']}")
        self.stat_duration.setText(f"S√ºre: {self.selected_mission_data['duration_text']}")
        self.stat_category.setText(f"Kategori: {self.selected_mission_data['category'].upper()}")
        
        # Altitude stat
        default_params = self.selected_mission_data['default_params']
        altitude = default_params.get('altitude', 'N/A')
        self.stat_altitude.setText(f"ƒ∞rtifa: {altitude}m")
        
        # Description g√ºncelle
        self.mission_description.setPlainText(self.selected_mission_data['description'])
        
        # Parametreleri g√ºncelle
        self.update_parameters_ui()
    
    def update_parameters_ui(self):
        """Parametre UI'sƒ±nƒ± g√ºncelle - Fƒ∞XED VERSION"""
        # √ñNCE T√úM ESKƒ∞ WIDGET'LARI TEMƒ∞ZLE
        self.clear_parameters_completely()
        
        if not self.selected_mission_data:
            # Bo≈ü state ekle
            empty_label = QLabel("Parametre g√∂rmek i√ßin bir g√∂rev se√ßin...")
            empty_label.setAlignment(Qt.AlignCenter)
            empty_label.setStyleSheet("color: #7f8c8d; font-style: italic;")
            self.params_layout.addWidget(empty_label)
            return
        
        # Yeni parametreleri ekle
        default_params = self.selected_mission_data['default_params']
        category = self.selected_mission_data['category']
        
        # Grid layout
        grid = QGridLayout()
        row = 0
        
        # Her parametre i√ßin widget olu≈ütur
        for param_name, param_value in default_params.items():
            # Label
            label = QLabel(self.get_param_display_name(param_name))
            label.setStyleSheet("font-weight: bold; color: #2c3e50;")
            grid.addWidget(label, row, 0)
            
            # Widget
            widget = self.create_param_widget(param_name, param_value, category)
            grid.addWidget(widget, row, 1)
            
            # Unit label (eƒüer varsa)
            unit = self.get_param_unit(param_name)
            if unit:
                unit_label = QLabel(unit)
                unit_label.setStyleSheet("color: #7f8c8d; font-size: 11px;")
                grid.addWidget(unit_label, row, 2)
            
            self.param_widgets[param_name] = widget
            row += 1
        
        self.params_layout.addLayout(grid)
        
        # EW √∂zel parametreler i√ßin ekstra bilgi
        if category == 'ew_vtol':
            info_frame = QFrame()
            info_frame.setFrameStyle(QFrame.Box)
            info_layout = QVBoxLayout(info_frame)
            
            ew_info = QLabel("‚ö° EW VTOL Parametreleri:")
            ew_info.setStyleSheet("font-weight: bold; color: #e67e22;")
            
            ew_details = QLabel("‚Ä¢ transition_attempts: FW ge√ßi≈ü deneme sayƒ±sƒ±\n‚Ä¢ scan_interval: Elektronik tarama aralƒ±ƒüƒ±\n‚Ä¢ pattern_size: Devriye alanƒ± boyutu\n‚Ä¢ landing_timeout: ƒ∞ni≈ü g√ºvenlik s√ºresi")
            ew_details.setStyleSheet("color: #34495e; font-size: 10px;")
            
            info_layout.addWidget(ew_info)
            info_layout.addWidget(ew_details)
            
            self.params_layout.addWidget(info_frame)
    
    def clear_parameters_completely(self):
        """Parametreleri tamamen temizle - YENƒ∞ FONKSƒ∞YON"""
        # T√ºm widget'larƒ± sil
        while self.params_layout.count():
            child = self.params_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
            elif child.layout():
                # Layout i√ßindeki widget'larƒ± da temizle
                while child.layout().count():
                    sub_child = child.layout().takeAt(0)
                    if sub_child.widget():
                        sub_child.widget().deleteLater()
                child.layout().deleteLater()
        
        # Widget dictionary'yi temizle
        self.param_widgets.clear()
    
    def create_param_widget(self, param_name, param_value, category):
        """Parametre widget'ƒ± olu≈ütur"""
        if isinstance(param_value, bool):
            # CheckBox for boolean
            widget = QCheckBox()
            widget.setChecked(param_value)
            return widget
        
        elif isinstance(param_value, int):
            # SpinBox for integer
            widget = QSpinBox()
            
            # Parametre √∂zel range'leri
            if param_name == 'altitude':
                widget.setRange(5, 100)
                widget.setSuffix(' m')
            elif param_name == 'duration':
                widget.setRange(1, 120)
                widget.setSuffix(' dk' if category == 'standard' else ' s')
            elif param_name == 'speed':
                widget.setRange(1, 20)
                widget.setSuffix(' m/s')
            elif param_name == 'radius':
                widget.setRange(50, 1000)
                widget.setSuffix(' m')
            elif param_name == 'scan_interval':
                widget.setRange(3, 30)
                widget.setSuffix(' s')
            elif param_name == 'pattern_size':
                widget.setRange(100, 2000)
                widget.setSuffix(' m')
            elif param_name == 'transition_attempts':
                widget.setRange(3, 20)
            elif param_name == 'landing_timeout':
                widget.setRange(10, 60)
                widget.setSuffix(' s')
            else:
                widget.setRange(1, 1000)
            
            widget.setValue(param_value)
            return widget
        
        elif isinstance(param_value, float):
            # DoubleSpinBox for float
            widget = QDoubleSpinBox()
            
            if param_name == 'altitude':
                widget.setRange(3.0, 100.0)
                widget.setDecimals(1)
                widget.setSuffix(' m')
            else:
                widget.setRange(0.1, 1000.0)
                widget.setDecimals(1)
            
            widget.setValue(param_value)
            return widget
        
        else:
            # LineEdit for others
            from PyQt5.QtWidgets import QLineEdit
            widget = QLineEdit()
            widget.setText(str(param_value))
            return widget
    
    def get_param_display_name(self, param_name):
        """Parametre g√∂r√ºnt√º adƒ±"""
        display_names = {
            'altitude': 'üìè ƒ∞rtifa',
            'duration': '‚è∞ S√ºre',
            'speed': 'üöÄ Hƒ±z',
            'radius': '‚≠ï Yarƒ±√ßap',
            'auto_rtl': 'üè† Otomatik RTL',
            'scan_interval': 'üì° Tarama Aralƒ±ƒüƒ±',
            'pattern_size': 'üìç Devriye Alanƒ±',
            'transition_attempts': 'üîÑ Transition Denemeleri',
            'landing_timeout': 'üõ¨ ƒ∞ni≈ü Timeout'
        }
        return display_names.get(param_name, param_name.title())
    
    def get_param_unit(self, param_name):
        """Parametre birimi"""
        units = {
            'altitude': 'm',
            'speed': 'm/s',
            'radius': 'm',
            'scan_interval': 'saniye',
            'pattern_size': 'metre',
            'landing_timeout': 'saniye'
        }
        return units.get(param_name, '')
    
    def get_current_params(self):
        """Mevcut parametre deƒüerlerini al"""
        if not self.selected_mission_data:
            return {}
        
        params = {}
        
        for param_name, widget in self.param_widgets.items():
            if hasattr(widget, 'isChecked'):  # QCheckBox
                params[param_name] = widget.isChecked()
            elif hasattr(widget, 'value'):  # QSpinBox, QDoubleSpinBox
                params[param_name] = widget.value()
            elif hasattr(widget, 'text'):  # QLineEdit
                params[param_name] = widget.text()
        
        return params
    
    def clear_selection(self):
        """Se√ßimi temizle"""
        self.selected_mission_data = None
        self.start_btn.setEnabled(False)
        
        # Lists temizle
        self.standard_missions_list.clearSelection()
        if hasattr(self, 'ew_missions_list'):
            self.ew_missions_list.clearSelection()
        
        # Preview temizle
        self.preview_title.setText("G√∂rev se√ßin...")
        self.stat_difficulty.setText("Zorluk: -")
        self.stat_duration.setText("S√ºre: -")
        self.stat_altitude.setText("ƒ∞rtifa: -")
        self.stat_category.setText("Kategori: -")
        
        self.mission_description.setPlainText("G√∂rev se√ßtiƒüinizde detaylƒ± a√ßƒ±klama burada g√∂r√ºnecek...")
    
    def update_mission_preview(self):
        """Mission preview g√ºncelleme (timer callback)"""
        # Gelecekte animasyon vs eklenebilir
        pass
    
    def preview_mission(self):
        """G√∂rev √∂nizleme"""
        if not self.selected_mission_data:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Uyarƒ±", "√ñnce bir g√∂rev se√ßin!")
            return
        
        # √ñnizleme dialog'u a√ßƒ±labilir
        params = self.get_current_params()
        
        from PyQt5.QtWidgets import QMessageBox
        
        preview_text = f"""
üéØ G√ñREV √ñNƒ∞ZLEME

üìã G√∂rev: {self.selected_mission_data['mission_type']}
üìÇ Kategori: {self.selected_mission_data['category'].upper()}
üéØ Zorluk: {self.selected_mission_data['difficulty']}

‚öôÔ∏è PARAMETRE AYARLARI:
"""
        
        for param_name, param_value in params.items():
            display_name = self.get_param_display_name(param_name)
            unit = self.get_param_unit(param_name)
            preview_text += f"   {display_name}: {param_value} {unit}\n"
        
        preview_text += f"""
üìù A√áIKLAMA:
{self.selected_mission_data['description']}

‚úÖ Bu ayarlarla g√∂rev ba≈ülatmaya hazƒ±r!
"""
        
        QMessageBox.information(self, "G√∂rev √ñnizleme", preview_text)
    
    def start_mission(self):
        """G√∂rev ba≈ülatma"""
        if not self.selected_mission_data:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(self, "Uyarƒ±", "√ñnce bir g√∂rev se√ßin!")
            return
        
        # Son onay
        from PyQt5.QtWidgets import QMessageBox
        
        mission_name = self.selected_mission_data['mission_type']
        category = self.selected_mission_data['category']
        
        reply = QMessageBox.question(
            self, 
            'üöÄ G√ñREV BA≈ûLATMA ONAYI',
            f'''‚ö†Ô∏è G√ñREV BA≈ûLATILACAK!

üéØ G√∂rev: {mission_name}
üìÇ Kategori: {category.upper()}

Bu g√∂revi ba≈ülatmak istediƒüinizden emin misiniz?

‚ö†Ô∏è G√∂rev ba≈üladƒ±ktan sonra manuel m√ºdahale gerekebilir.''',
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # Parametreleri topla ve mission data'yƒ± hazƒ±rla
            current_params = self.get_current_params()
            
            # Final mission data
            final_mission_data = self.selected_mission_data.copy()
            final_mission_data.update(current_params)
            
            print(f"‚úÖ G√∂rev ba≈ülatma onaylandƒ±: {mission_name}")
            print(f"üìä Parametreler: {current_params}")
            
            # Signal emit et
            self.mission_selected.emit(final_mission_data)
            self.accept()
        else:
            print("‚ùå G√∂rev ba≈ülatma iptal edildi")
    
    def show_help(self):
        """Yardƒ±m dialog'u"""
        from PyQt5.QtWidgets import QMessageBox
        
        help_text = """
üéØ ƒ∞HA G√ñREV KOMUTA MERKEZƒ∞ - YARDIM

üìã G√ñREV KATEGORƒ∞LERƒ∞:

üöÅ STANDART G√ñREVLER:
‚Ä¢ Normal Devriye: Temel MAVSDK devriye
‚Ä¢ Al√ßak Sessiz Devriye: D√º≈ü√ºk irtifa operasyonu
‚Ä¢ Dairesel Devriye: Merkez etrafƒ±nda d√∂nel devriye
‚Ä¢ Waypoint Takip: Belirlenen noktalarƒ± takip

üöÅ‚úàÔ∏è EW VTOL G√ñREVLER:
‚Ä¢ VTOL Transition √∂zellikli
‚Ä¢ Elektronik spektrum tarama
‚Ä¢ Geli≈ümi≈ü parametreler
‚Ä¢ G√ºvenli ini≈ü prosed√ºr√º

‚öôÔ∏è PARAMETRE AYARLARI:
‚Ä¢ ƒ∞rtifa: Operasyon y√ºksekliƒüi
‚Ä¢ S√ºre: G√∂rev s√ºresi
‚Ä¢ Hƒ±z: Hareket hƒ±zƒ±
‚Ä¢ Yarƒ±√ßap: Devriye alanƒ± boyutu

üöÄ G√ñREV BA≈ûLATMA:
1. Kategori se√ßin (Standart/EW VTOL)
2. G√∂rev se√ßin
3. Parametreleri ayarlayƒ±n
4. √ñnizleme yapƒ±n
5. G√∂revi ba≈ülatƒ±n

‚ö†Ô∏è √ñNEMLƒ∞ NOTLAR:
‚Ä¢ EW VTOL g√∂revler daha karma≈üƒ±ktƒ±r
‚Ä¢ Parametreleri dikkatlice ayarlayƒ±n
‚Ä¢ G√ºvenli operasyon alanƒ±nda √ßalƒ±≈üƒ±n
‚Ä¢ Acil durum prosed√ºrlerini bilin
"""
        
        QMessageBox.information(self, "üìñ Yardƒ±m", help_text)
    
    def show_settings(self):
        """Ayarlar dialog'u"""
        from PyQt5.QtWidgets import QMessageBox
        
        settings_text = """
‚öôÔ∏è Sƒ∞STEM AYARLARI

üîß MEVCUT DURUM:
‚Ä¢ MAVSDK: Aktif
‚Ä¢ EW VTOL: """ + ("Aktif" if EW_MISSIONS_AVAILABLE else "Pasif") + """
‚Ä¢ Connection: UDP 14540

üì° BAƒûLANTI AYARLARI:
‚Ä¢ Default connection: udp://:14540
‚Ä¢ Timeout: 30 saniye
‚Ä¢ Max concurrent: 5 task

üéØ G√ñREV AYARLARI:
‚Ä¢ Default altitude: 20m
‚Ä¢ Default duration: 10 dakika
‚Ä¢ Auto RTL: Aktif

‚ö†Ô∏è G√úVENLƒ∞K AYARLARI:
‚Ä¢ Minimum altitude: 5m
‚Ä¢ Maximum altitude: 100m
‚Ä¢ Emergency timeout: 60s

Bu ayarlar ui.py dosyasƒ±ndan deƒüi≈ütirilebilir.
"""
        
        QMessageBox.information(self, "‚öôÔ∏è Ayarlar", settings_text)
    
    def apply_modern_styles(self):
        """Modern UI stilleri uygula - DARK PROFESSIONAL THEME"""
        self.setStyleSheet("""
            QDialog {
                background-color: #2c3e50;
                color: white;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            
            QTabWidget::pane {
                border: 2px solid #34495e;
                border-radius: 10px;
                background-color: #34495e;
                margin-top: 8px;
            }
            
            QTabBar::tab {
                background-color: #3498db;
                color: white;
                padding: 14px 24px;
                margin: 3px;
                border-radius: 8px;
                font-weight: bold;
                min-width: 130px;
                border: 1px solid #2980b9;
            }
            
            QTabBar::tab:selected {
                background-color: #e74c3c;
                color: white;
                border: 1px solid #c0392b;
            }
            
            QTabBar::tab:hover {
                background-color: #e67e22;
                color: white;
                border: 1px solid #d35400;
            }
            
            QGroupBox {
                font-size: 15px;
                font-weight: bold;
                border: 2px solid #34495e;
                border-radius: 12px;
                margin-top: 18px;
                padding-top: 25px;
                background-color: #2c3e50;
                color: white;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 20px;
                padding: 8px 20px;
                color: white;
                background-color: #2c3e50;
                border-radius: 6px;
                border: 1px solid #34495e;
                font-weight: bold;
            }
            
            QListWidget {
                background-color: #34495e;
                border: 2px solid #4a5f7a;
                border-radius: 10px;
                padding: 8px;
                selection-background-color: #e74c3c;
                alternate-background-color: #3d4f65;
                color: white;
            }
            
            QListWidget::item {
                padding: 15px;
                border-bottom: 1px solid #4a5f7a;
                border-radius: 8px;
                margin: 3px;
                color: white;
                font-weight: 500;
            }
            
            QListWidget::item:selected {
                background-color: #e74c3c;
                color: white;
                font-weight: bold;
                border: 1px solid #c0392b;
            }
            
            QListWidget::item:hover {
                background-color: #e67e22;
                color: white;
                border: 1px solid #d35400;
            }
            
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 14px 24px;
                border-radius: 10px;
                font-weight: bold;
                font-size: 14px;
            }
            
            QPushButton:hover {
                background-color: #c0392b;
                transform: translateY(-2px);
            }
            
            QPushButton:pressed {
                background-color: #a93226;
            }
            
            QPushButton:disabled {
                background-color: #566573;
                color: white;
            }
            
            QSpinBox, QDoubleSpinBox {
                background-color: #34495e;
                border: 2px solid #4a5f7a;
                border-radius: 8px;
                padding: 10px;
                font-size: 13px;
                min-width: 120px;
                color: white;
                font-weight: 500;
            }
            
            QSpinBox:focus, QDoubleSpinBox:focus {
                border: 2px solid #3498db;
                background-color: #3d4f65;
            }
            
            QTextEdit {
                background-color: #1c1c1c;
                border: 2px solid #e74c3c;
                border-radius: 10px;
                padding: 15px;
                font-size: 13px;
                line-height: 1.6;
                color: #00ff00;
                font-family: 'Consolas', 'Monaco', monospace;
            }
            
            QTextEdit:focus {
                border: 2px solid #3498db;
                background-color: #1a1a1a;
            }
            
            QCheckBox {
                spacing: 12px;
                font-weight: bold;
                color: white;
                font-size: 13px;
            }
            
            QCheckBox::indicator {
                width: 20px;
                height: 20px;
            }
            
            QCheckBox::indicator:unchecked {
                border: 2px solid #4a5f7a;
                background-color: #34495e;
                border-radius: 5px;
            }
            
            QCheckBox::indicator:checked {
                border: 2px solid #27ae60;
                background-color: #27ae60;
                border-radius: 5px;
            }
            
            QCheckBox::indicator:checked::after {
                content: "‚úì";
                color: white;
                font-weight: bold;
                font-size: 14px;
            }
            
            QFrame[frameShape="4"] { /* QFrame::Box */
                border: 1px solid #4a5f7a;
                border-radius: 8px;
                background-color: #34495e;
                padding: 12px;
            }
            
            QLabel {
                color: white;
            }
            
            /* √ñzel buton stilleri - DARK THEME */
            QPushButton[objectName="start_btn"] {
                background-color: #27ae60;
                font-size: 15px;
                padding: 18px 30px;
                border-radius: 12px;
            }
            
            QPushButton[objectName="start_btn"]:hover {
                background-color: #229954;
                transform: translateY(-2px);
            }
            
            QPushButton[objectName="cancel_btn"] {
                background-color: #e74c3c;
                font-size: 14px;
                padding: 14px 24px;
            }
            
            QPushButton[objectName="cancel_btn"]:hover {
                background-color: #c0392b;
            }
            
            QPushButton[objectName="preview_btn"] {
                background-color: #f39c12;
                color: white;
                font-size: 14px;
                padding: 14px 24px;
            }
            
            QPushButton[objectName="preview_btn"]:hover {
                background-color: #e67e22;
                color: white;
            }
            
            /* Mission Preview √ñzel Stilleri - DARK */
            QLabel[objectName="preview_title"] {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #2c3e50, stop:1 #34495e);
                color: white;
                font-size: 18px;
                font-weight: bold;
                padding: 15px;
                border-radius: 10px;
                margin-bottom: 10px;
                border: 1px solid #4a5f7a;
            }
            
            /* Stats Labels - DARK */
            QLabel[objectName="stat_label"] {
                background-color: #34495e;
                color: white;
                padding: 8px 12px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 12px;
                border: 1px solid #4a5f7a;
            }
            
            /* Parameter Labels - DARK */
            QLabel[objectName="param_label"] {
                color: white;
                font-weight: bold;
                font-size: 13px;
            }
            
            /* Unit Labels - DARK */
            QLabel[objectName="unit_label"] {
                color: white;
                font-size: 11px;
                font-style: italic;
            }
            
            /* EW Info Panel - DARK */
            QFrame[objectName="ew_info"] {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #8e44ad, stop:1 #9b59b6);
                border-radius: 10px;
                padding: 15px;
                border: 1px solid #7d3c98;
            }
            
            QLabel[objectName="ew_info_label"] {
                color: white;
                font-weight: bold;
                font-size: 14px;
            }
            
            QLabel[objectName="ew_features"] {
                color: white;
                font-size: 12px;
                line-height: 1.4;
            }
            
            /* Konsol √ñzel Stilleri */
            QTextEdit[objectName="console"] {
                background-color: #1c1c1c;
                border: 2px solid #e74c3c;
                color: #00ff00;
                font-family: 'Consolas', 'Monaco', monospace;
            }
            
            /* Gauge ve Indicator Stilleri */
            QProgressBar {
                border: 2px solid #34495e;
                border-radius: 8px;
                background-color: #2c3e50;
                text-align: center;
                color: white;
                font-weight: bold;
            }
            
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #27ae60, stop:0.5 #f39c12, stop:1 #e74c3c);
                border-radius: 6px;
            }
            
            /* Slider Stilleri */
            QSlider::groove:horizontal {
                border: 1px solid #4a5f7a;
                height: 8px;
                background: #34495e;
                border-radius: 4px;
            }
            
            QSlider::handle:horizontal {
                background: #3498db;
                border: 1px solid #2980b9;
                width: 18px;
                margin: -5px 0;
                border-radius: 9px;
            }
            
            QSlider::handle:horizontal:hover {
                background: #5dade2;
            }
            
            /* Scrollbar Stilleri */
            QScrollBar:vertical {
                background: #34495e;
                width: 15px;
                border-radius: 7px;
            }
            
            QScrollBar::handle:vertical {
                background: #e74c3c;
                border-radius: 7px;
                min-height: 20px;
            }
            
            QScrollBar::handle:vertical:hover {
                background: #c0392b;
            }
            
            /* Sol taraftaki simge/icon yazƒ±larƒ± i√ßin FORCED WHITE */
            * {
                color: white !important;
            }
            
            /* Konsol metni hari√ß (ye≈üil kalmalƒ±) */
            QTextEdit[objectName="console"] {
                color: #00ff00 !important;
            }
        """)
        # Object name'leri ayarla - FINAL DARK THEME
        # Object name'leri ayarla - DARK THEME ENHANCED
    
        
        
        # Buton objelerini ayarla
        self.start_btn.setObjectName("start_btn")
        
        # Header'ƒ± √∂zelle≈ütir
        self.setWindowFlags(Qt.Dialog | Qt.WindowTitleHint | Qt.WindowCloseButtonHint)


# Mission Selector entegrasyonu i√ßin helper fonksiyonlar

def create_mission_selector(parent=None):
    """Mission Selector olu≈ütur"""
    return MissionSelectorDialog(parent)


def test_mission_selector():
    """Mission Selector test fonksiyonu"""
    import sys
    from PyQt5.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    # Test dialog
    dialog = MissionSelectorDialog()
    
    def on_mission_selected(mission_data):
        print("üéØ Test - Se√ßilen g√∂rev:")
        print(f"   G√∂rev: {mission_data.get('mission_type')}")
        print(f"   Kategori: {mission_data.get('category')}")
        print(f"   Parametreler: {mission_data}")
    
    dialog.mission_selected.connect(on_mission_selected)
    
    # Dialog g√∂ster
    result = dialog.exec_()
    
    if result == QDialog.Accepted:
        print("‚úÖ Dialog ba≈üarƒ±yla tamamlandƒ±")
    else:
        print("‚ùå Dialog iptal edildi")
    
    app.quit()


if __name__ == "__main__":
    print("üéØ Mission Selector Test")
    print("=" * 40)
    print("Features:")
    print("‚úÖ Standart MAVSDK g√∂revler")
    print("‚úÖ EW VTOL g√∂revler (eƒüer mevcut)")
    print("‚úÖ Parametreli konfig√ºrasyon")
    print("‚úÖ Modern UI tasarƒ±m")
    print("‚úÖ G√∂rev √∂nizleme")
    print("‚úÖ Yardƒ±m ve ayarlar")
    print("=" * 40)
    
    test_mission_selector()
